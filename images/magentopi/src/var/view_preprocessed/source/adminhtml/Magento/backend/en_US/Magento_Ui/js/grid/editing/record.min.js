define(['underscore','mageUtils','uiLayout','uiCollection'],function(_,utils,layout,Collection){'use strict';return Collection.extend({defaults:{active:true,hasChanges:false,fields:[],errorsCount:0,fieldTmpl:'ui/grid/editing/field',rowTmpl:'ui/grid/editing/row',templates:{fields:{base:{parent:'${ $.$data.record.name }',name:'${ $.$data.column.index }',provider:'${ $.$data.record.name }',dataScope:'data.${ $.$data.column.index }',imports:{disabled:'${ $.$data.record.parentName }:fields.${ $.$data.column.index }.disabled'},isEditor:true},text:{component:'Magento_Ui/js/form/element/abstract',template:'ui/form/element/input'},date:{component:'Magento_Ui/js/form/element/date',template:'ui/form/element/date',dateFormat:'MMM d, y h:mm:ss a'},select:{component:'Magento_Ui/js/form/element/select',template:'ui/form/element/select',options:'${ JSON.stringify($.$data.column.options) }'}}},listens:{elems:'updateFields',data:'updateState'},imports:{onColumnsUpdate:'${ $.columnsProvider }:elems'},modules:{columns:'${ $.columnsProvider }',editor:'${ $.editorProvider }'}},initialize:function(){_.bindAll(this,'countErrors');utils.limit(this,'updateState',10);return this._super();},initObservable:function(){this._super().track('errorsCount hasChanges').observe('active fields');return this;},initElement:function(field){field.on('error',this.countErrors);return this._super();},initField:function(column){var field=this.buildField(column);layout([field]);return this;},buildField:function(column){var fields=this.templates.fields,field=column.editor;if(_.isObject(field)&&field.editorType){field=utils.extend({},fields[field.editorType],field);}else if(_.isString(field)){field=fields[field];}
field=utils.extend({},fields.base,field);return utils.template(field,{record:this,column:column},true,true);},createFields:function(columns){columns.forEach(function(column){if(column.editor&&!this.hasChild(column.index)){this.initField(column);}},this);return this;},getColumn:function(index){return this.columns().getChild(index);},getData:function(){return this.filterData(this.data);},getSavedData:function(){var editor=this.editor(),savedData=editor.getRowData(this.index);savedData=this.filterData(savedData);return this.normalizeData(savedData);},setData:function(data,partial){var currentData=partial?this.data:{};data=this.normalizeData(data);data=utils.extend({},currentData,data);this.set('data',data).updateState();return this;},filterData:function(data){var fields=_.pluck(this.elems(),'index');_.each(this.preserveFields,function(enabled,field){if(enabled&&!_.contains(fields,field)){fields.push(field);}});return _.pick(data,fields);},normalizeData:function(data){var index;this.elems.each(function(elem){index=elem.index;if(data.hasOwnProperty(index)){data[index]=elem.normalizeData(data[index]);}});return data;},clear:function(){this.elems.each('clear');return this;},validate:function(){return this.elems.map('validate');},isValid:function(){return _.every(this.validate(),'valid');},countErrors:function(){var errorsCount=this.elems.filter('error').length;this.errorsCount=errorsCount;return errorsCount;},checkChanges:function(){var savedData=this.getSavedData(),data=this.normalizeData(this.getData());return utils.compare(savedData,data);},updateFields:function(){var fields;fields=this.columns().elems.map(function(column){return this.getChild(column.index)||column;},this);this.fields(fields);return this;},updateState:function(){var diff=this.checkChanges(),changed={};this.hasChanges=!diff.equal;changed[this.index]=this.data;this.editor().set('changed',[changed]);return this;},isActionsColumn:function(column){return column.dataType==='actions';},onColumnsUpdate:function(columns){this.createFields(columns).updateFields();}});});